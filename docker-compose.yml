version: '3.8'

services:
  rabbit:
    image: rabbitmq:3.11-management
    container_name: rabbit
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./rabbitmq-script.sh:/rabbitmq-script.sh
      - ./.env:/tmp/rabbitmq.env  # Mount the .env file
    command: >
      bash -c "
        rabbitmq-server &
        sleep 10
        rabbitmqctl wait /var/lib/rabbitmq/mnesia/rabbit@rabbitmq.pid
        /rabbitmq-script.sh
        wait
      "
    networks:
      - app_network
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    restart: always
    networks:
      - app_network
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    depends_on:
      - postgres
      - rabbit
    networks:
      - app_network
    environment:
      RABBITMQ_URI: ${RABBITMQ_URI}
      EMAIL_QUEUE_NAME: ${EMAIL_QUEUE_NAME}
      SCAN_QUEUE_NAME: ${SCAN_QUEUE_NAME}
      RPC_QUEUE_NAME: ${RPC_QUEUE_NAME}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_DEV_SECRET: ${JWT_DEV_SECRET}
      JWT_PROD_SECRET: ${JWT_PROD_SECRET}
      PORT: 3000
      HOST: localhost
    ports:
      - "3000:3000"
  scanner-service:
    build:
      context: ./scanner-service   # This is where your Golang project should be located
      dockerfile: Dockerfile  # Dockerfile for your Golang project
    container_name: scanner-service
    depends_on:
      - rabbit
      - mongo
    environment:
      RABBITMQ_URI: ${RABBITMQ_URI}
      MONGO_CONNECTION_URI: ${MONGO_CONNECTION_URI}
      AUTH_SERVICE_URI: ${AUTH_SERVICE_URI}
      EMAIL_QUEUE_NAME: ${EMAIL_QUEUE_NAME}
      SCAN_QUEUE_NAME: ${SCAN_QUEUE_NAME}
      RPC_QUEUE_NAME: ${RPC_QUEUE_NAME}
    command: go run main.go # Command to run your Golang application after build
    restart: always
    networks:
      - app_network
  email-service:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    container_name: email-service
    depends_on:
      - rabbit
    networks:
      - app_network
    environment:
      RABBITMQ_URI: ${RABBITMQ_URI}
      EMAIL_QUEUE_NAME: ${EMAIL_QUEUE_NAME}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_DEFAULT_FROM: ${MAIL_DEFAULT_FROM}

volumes:
  rabbitmq_data:
  mongo-data:
  scanner-service:
  postgres-data:
networks:
  app_network:
    driver: bridge